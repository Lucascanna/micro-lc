# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main ]
    tags: '*'
  pull_request:
    branches: [ main ]

jobs:
  test:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: yarn install --frozen-lockfile
    - run: yarn add --dev coveralls
    - run: yarn add -D handlebars@4.5.0
    - run: yarn coverage

    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build docker
    needs: test
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=mia-platform/microlc
          VERSION=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=$(echo ${VERSION} | sed s/^v//)
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            VERSION=latest
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=image::${DOCKER_IMAGE}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.BOT_DOCKER_USERNAME }}
          password: ${{ secrets.BOT_DOCKER_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          pull: true
          push: true
          cache-from: type=registry,ref=${{ steps.prep.outputs.image }}:latest
          cache-to: type=inline
          tags: ${{ steps.prep.outputs.tags }}
